<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">
{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'enctype': 'multipart/form-data'}}) }}
    <div class="px-4 py-6">
      <div id="image-preview" class="max-w-sm p-6 mb-4 bg-gray-100 border-dashed border-2 border-gray-400 rounded-lg items-center mx-auto text-center cursor-pointer">
        {{ form_widget(form.articlePictureFile, {'id': 'upload', 'attr': {'class': 'hidden', 'accept': 'image/*'}}) }}
        <label for="upload" class="cursor-pointer">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8 text-gray-700 mx-auto mb-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5" />
          </svg>
          <h5 class="mb-2 text-xl font-bold tracking-tight text-gray-700">Upload picture</h5>
          <p class="font-normal text-sm text-gray-400 md:px-6">Choose photo size should be less than <b class="text-gray-600">2mb</b></p>
          <p class="font-normal text-sm text-gray-400 md:px-6">and should be in <b class="text-gray-600">JPG, PNG, or GIF</b> format.</p>
          <span id="filename" class="text-gray-500 bg-gray-200 z-50"></span>
        </label>
      </div>
    </div>


            {# {{ form_widget(form.articlePictureFile, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }} #}
            {{ form_errors(form.articlePictureFile, {'class': 'text-red-500'}) }}

        <div class="mb-4">
            <label for="{{ form.prix.vars.id }}" class="block text-gray-700 text-sm font-bold mb-2">Prix</label>
            {{ form_widget(form.prix, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }}
            {{ form_errors(form.prix, {'class': 'text-red-500'}) }}
        </div>

        <div class="mb-4">
            <label for="{{ form.nom.vars.id }}" class="block text-gray-700 text-sm font-bold mb-2">Nom</label>
            {{ form_widget(form.nom, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }}
            {{ form_errors(form.nom, {'class': 'text-red-500'}) }}
        </div>

        <div class="mb-4">
            <label for="{{ form.description.vars.id }}" class="block text-gray-700 text-sm font-bold mb-2">Description</label>
            {{ form_widget(form.description, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }}
            {{ form_errors(form.description, {'class': 'text-red-500'}) }}
        </div>

        <div class="mb-4">
            <label for="{{ form.categorie.vars.id }}" class="block text-gray-700 text-sm font-bold mb-2">Catégorie</label>
            {{ form_widget(form.categorie, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }}
            {{ form_errors(form.categorie, {'class': 'text-red-500'}) }}
        </div>

        <div class="mb-4">
            <label for="{{ form.quantite.vars.id }}" class="block text-gray-700 text-sm font-bold mb-2">Quantité</label>
            {{ form_widget(form.quantite, {'attr': {'class': 'form-input w-full p-2 rounded-md'}}) }}
            {{ form_errors(form.quantite, {'class': 'text-red-500'}) }}
        </div>

        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
            {{ button_label|default('Save') }}
        </button>
        
        {{ form_end(form) }}
    </div>

<script>
  const uploadInput = document.getElementById('upload');
  const filenameLabel = document.getElementById('filename');
  const imagePreview = document.getElementById('image-preview');

  // Check if the event listener has been added before
  let isEventListenerAdded = false;

  uploadInput.addEventListener('change', (event) => {
    const file = event.target.files[0];

    if (file) {
      filenameLabel.textContent = file.name;

      const reader = new FileReader();
      reader.onload = (e) => {
        imagePreview.innerHTML =
          `<img src="${e.target.result}" class="max-h-48 rounded-lg mx-auto" alt="Image preview" />`;
        imagePreview.classList.remove('border-dashed', 'border-2', 'border-gray-400');

        // Add event listener for image preview only once
        if (!isEventListenerAdded) {
          imagePreview.addEventListener('click', () => {
            uploadInput.click();
          });

          isEventListenerAdded = true;
        }
      };
      reader.readAsDataURL(file);
    } else {
      filenameLabel.textContent = '';
      imagePreview.innerHTML =
        `<div class="bg-gray-200 h-48 rounded-lg flex items-center justify-center text-gray-500">No image preview</div>`;
      imagePreview.classList.add('border-dashed', 'border-2', 'border-gray-400');

      // Remove the event listener when there's no image
      imagePreview.removeEventListener('click', () => {
        uploadInput.click();
      });

      isEventListenerAdded = false;
    }
  });

  uploadInput.addEventListener('click', (event) => {
    event.stopPropagation();
  });
</script>
